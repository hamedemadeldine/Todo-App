{"version":3,"sources":["Component/todoitems/todo.js","Component/additems/additems.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","props","items","deleteitem","ListItems","length","map","item","key","id","className","name","age","onClick","AddItem","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","addItem","onSubmit","this","type","placeholder","onChange","Component","App","i","findIndex","splice","Math","random","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRA+BeA,G,MA5BG,SAACC,GAAW,IACnBC,EAAqBD,EAArBC,MAAOC,EAAcF,EAAdE,WAERC,EADOF,EAAMG,OAEfH,EAAMI,KAAI,SAAAC,GACN,OACI,yBAAKC,IAAKD,EAAKE,IACX,0BAAMC,UAAU,QAAQH,EAAKI,MAC7B,0BAAMD,UAAU,OAAOH,EAAKK,KAC5B,0BAAMF,UAAU,cAAcG,QAAS,kBAAMV,EAAWI,EAAKE,MAA7D,YAKZ,uDAEJ,OACI,yBAAKC,UAAU,aACX,6BACI,0BAAMA,UAAU,cAAhB,QACA,0BAAMA,UAAU,aAAhB,OACA,0BAAMA,UAAU,gBAAhB,WAEHN,K,OCcEU,G,iNApCXC,MAAQ,CACJJ,KAAO,GACPC,IAAM,I,EAGVI,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOV,GAAKQ,EAAEE,OAAOC,S,EAIhCC,aAAe,SAACJ,GAEZ,GADAA,EAAEK,iBACyB,KAAxBL,EAAEE,OAAOR,KAAKS,MACb,OAAO,EAEP,EAAKnB,MAAMsB,QAAQ,EAAKR,OACxB,EAAKG,SAAS,CACVP,KAAM,GACNC,IAAK,M,wEAKb,OACI,6BACI,0BAAMY,SAAUC,KAAKJ,cACjB,2BAAOK,KAAK,OAAOC,YAAY,gBAAgBlB,GAAG,OAAOmB,SAAUH,KAAKT,aAAcI,MAAOK,KAAKV,MAAMJ,OACxG,2BAAOe,KAAK,SAASC,YAAY,eAAelB,GAAG,MAAMmB,SAAUH,KAAKT,aAAcI,MAAOK,KAAKV,MAAMH,MACxG,2BAAOc,KAAK,SAASN,MAAM,c,GA9BzBS,cCiCPC,E,2MA/Bbf,MAAQ,CACNb,MAAQ,CACN,CAACO,GAAG,EAAEE,KAAK,QAAQC,IAAI,IACvB,CAACH,GAAG,EAAEE,KAAK,OAAOC,IAAI,IACtB,CAACH,GAAG,EAAEE,KAAK,SAASC,IAAI,M,EAI5BT,WAAa,SAACM,GACZ,IAAIP,EAAQ,EAAKa,MAAMb,MACnB6B,EAAI7B,EAAM8B,WAAU,SAAAzB,GAAI,OAAIA,EAAKE,KAAOA,KAC5CP,EAAM+B,OAAOF,EAAE,GACf,EAAKb,SAAS,CAAChB,W,EAGjBqB,QAAU,SAAChB,GACTA,EAAKE,GAAKyB,KAAKC,SACf,IAAIjC,EAAQ,EAAKa,MAAMb,MACvBA,EAAMkC,KAAK7B,GACX,EAAKW,SAAS,CAAChB,W,wEAGf,OACE,yBAAKQ,UAAU,iBACb,wBAAIA,UAAU,eAAd,aACA,kBAAC,EAAD,CAAWR,MAAOuB,KAAKV,MAAMb,MAAOC,WAAYsB,KAAKtB,aACrD,kBAAC,EAAD,CAASoB,QAASE,KAAKF,e,GA3BbM,aCQEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b25d8b97.chunk.js","sourcesContent":["import React from 'react'\r\nimport './todo.css'\r\n\r\nconst TodoItems = (props) => {\r\n    const {items, deleteitem} = props;\r\n    let length = items.length;\r\n    const ListItems = length ? (\r\n        items.map(item => {\r\n            return (\r\n                <div key={item.id}>\r\n                    <span className=\"name\">{item.name}</span>\r\n                    <span className=\"age\">{item.age}</span>\r\n                    <span className=\"action icon\" onClick={() => deleteitem(item.id)}>&times;</span>\r\n                </div>\r\n            )\r\n        })\r\n    ) : (\r\n        <p>There Is No Item To Show</p>\r\n    )\r\n    return (\r\n        <div className=\"ListItems\">\r\n            <div>\r\n                <span className=\"name title\">Name</span>\r\n                <span className=\"age title\">Age</span>\r\n                <span className=\"action title\">Action</span>\r\n            </div>\r\n            {ListItems}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItems;","import React , {Component} from 'react'\r\nimport './additems.css'\r\n\r\nclass AddItem extends Component {\r\n    state = {\r\n        name : '',\r\n        age : ''\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        }) \r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(e.target.name.value === '') {\r\n            return false\r\n        } else {\r\n            this.props.addItem(this.state)\r\n            this.setState({\r\n                name: '',\r\n                age: ''\r\n        })\r\n      }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" placeholder=\"Enter name...\" id=\"name\" onChange={this.handleChange} value={this.state.name}/>\r\n                    <input type=\"number\" placeholder=\"Enter age...\" id=\"age\" onChange={this.handleChange} value={this.state.age} />\r\n                    <input type=\"submit\" value=\"Add\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddItem","import React, { Component } from 'react';\nimport TodoItems from './Component/todoitems/todo'\nimport AddItem from './Component/additems/additems'\n\nclass App extends Component {\n  state = {\n    items : [\n      {id:1,name:'hamed',age:21},\n      {id:2,name:'sara',age:26},\n      {id:3,name:'shimaa',age:24}\n    ]\n  }\n\n  deleteitem = (id) =>{\n    let items = this.state.items;\n    let i = items.findIndex(item => item.id === id)\n    items.splice(i,1)\n    this.setState({items})\n  }\n  \n  addItem = (item) => {\n    item.id = Math.random();\n    let items = this.state.items;\n    items.push(item);\n    this.setState({items})\n  }\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1 className=\"text-center\">Todo List</h1>\n        <TodoItems items={this.state.items} deleteitem={this.deleteitem} />\n        <AddItem addItem={this.addItem} />\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}